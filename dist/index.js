const e=e=>"function"==typeof e,r=(r,t="")=>{Array.isArray(r)||(r=[r]),r.forEach((r=>{if(!e(r))throw new TypeError(`${t} Expecting function type`.trim())}))},t=r=>e(r.subscribe)&&e(r.get),s=(t,{persist:s}={persist:null})=>{let c=(()=>{const e=new Map,r=r=>(e.has(r)||e.set(r,new Set),e.get(r)),t=(e,t)=>{if("function"!=typeof t)throw new TypeError("Expecting callback function as second argument");return r(e).add(t),()=>r(e).delete(t)};return{publish:(e,t={})=>{r(e).forEach((e=>e(t)))},subscribe:t,subscribeOnce:(e,r)=>{const s=t(e,(e=>{r(e),s()}));return s},unsubscribeAll:r=>e.delete(r)}})(),n=t;const b=r=>{n!==r&&(n=r,e(s)&&s(n),c.publish("change",n))},i=()=>n;return{set:b,get:i,update:e=>{r(e,"[createStore.update]"),b(e(i()))},subscribe:(e,t=!1)=>(r(e,"[createStore.subscribe]"),t&&e(n),c.subscribe("change",e)),subscribeOnce:e=>(r(e,"[createStore.subscribeOnce]"),c.subscribeOnce("change",e))}},c=(e,c)=>{const n=s(void 0),b=[];e.forEach((e=>{if(!t(e))throw new TypeError("Expecting array of StoreLike objects");b.push(e.get())}));let i=!1;e.forEach(((e,r)=>{e.subscribe((e=>{b[r]=e,n.set(c(b)),i=!0}))}));const{get:u,subscribeOnce:o}=n;return{get:u,subscribe:(e,t=!1)=>(r(e,"[createDerivedStore.subscribe]"),t&&!i&&(n.set(c(b)),i=!0),n.subscribe(e,t)),subscribeOnce:o}};export{c as createDerivedStore,s as createStore,t as isStoreLike};
