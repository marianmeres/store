const e=e=>"function"==typeof e,t=(t,n="")=>{if(!e(t))throw new TypeError(`${n} Expecting function arg`.trim())},n=t=>e(t.subscribe),r=(n,r=null)=>{const s=t=>e(null==r?void 0:r.persist)&&r.persist(t);let i=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),n=(e,n)=>{if(!e)throw new TypeError("Expecting valid event name.");if("function"!=typeof n)throw new TypeError("Expecting valid callback function.");return t(e).add(n),()=>t(e).delete(n)};return{publish:(e,n)=>{t(e).forEach((e=>e(n)))},subscribe:n,subscribeOnce:(e,t)=>{const r=n(e,(e=>{t(e),r()}));return r},unsubscribe:(e,n)=>{t(e).delete(n)},unsubscribeAll:t=>e.delete(t)}})(),o=n;s(o);const c=()=>o,u=e=>{o!==e&&(o=e,s(o),i.publish("change",o))};return{set:u,get:c,update:e=>{t(e,"[update]"),u(e(c()))},subscribe:e=>(t(e,"[subscribe]"),e(o),i.subscribe("change",e))}},s=(s,i,o=null)=>{const c=t=>e(null==o?void 0:o.persist)&&o.persist(t),u=r(null==o?void 0:o.initialValue),l=[];if(s.forEach((e=>{if(!n(e))throw new TypeError("Expecting array of StoreLike objects");e.subscribe((e=>l.push(e)))()})),!e(i))throw new TypeError("Expecting second argument to be the derivative function");if(!i.length||i.length>2)throw new TypeError("Expecting the derivative function to have exactly 1 or 2 arguments");let a=0,d=[];const b=e=>{t(e,"[derived.subscribe]"),a++||s.forEach(((e,t)=>{d.push(e.subscribe((e=>{l[t]=e,1===i.length?(u.set(i(l)),c(u.get())):i(l,(e=>{u.set(e),c(u.get())}))})))}));const n=u.subscribe(e);return()=>{--a||(d.forEach((e=>e())),d=[]),n()}};return{get:()=>{let e;return b((t=>e=t))(),e},subscribe:b}},i=(e,t="session")=>{const n="session"===t?null===window||void 0===window?void 0:window.sessionStorage:null===window||void 0===window?void 0:window.localStorage;return{remove:()=>null==n?void 0:n.removeItem(e),set:t=>{try{null==n||n.setItem(e,JSON.stringify(t))}catch(e){console.error(e)}},get:()=>{try{return JSON.parse(null==n?void 0:n.getItem(e))}catch(e){}}}},o=(e,t="session",n)=>{["local","session"].includes(t)||(console.warn(`Ignoring invalid storageType '${t}', using 'session' instead.`),t="session");const s=i(e,t);return r(s.get()||n,{persist:s.set})};export{s as createDerivedStore,i as createStoragePersistor,o as createStorageStore,r as createStore,n as isStoreLike};
