"use strict";const e=e=>"function"==typeof e,t=(t,r="")=>{if(!e(t))throw new TypeError(`${r} Expecting function arg`.trim())},r=t=>e(t.subscribe),s=(r,s=null)=>{const o=t=>e(null==s?void 0:s.persist)&&s.persist(t);let n=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),r=(e,r)=>{if(!e)throw new TypeError("Expecting valid event name.");if("function"!=typeof r)throw new TypeError("Expecting valid callback function.");return t(e).add(r),()=>t(e).delete(r)};return{publish:(e,r)=>{t(e).forEach((e=>e(r)))},subscribe:r,subscribeOnce:(e,t)=>{const s=r(e,(e=>{t(e),s()}));return s},unsubscribe:(e,r)=>{t(e).delete(r)},unsubscribeAll:t=>e.delete(t)}})(),i=r;o(i);const c=()=>i,l=e=>{i!==e&&(i=e,o(i),n.publish("change",i))};return{set:l,get:c,update:e=>{t(e,"[update]"),l(e(c()))},subscribe:e=>(t(e,"[subscribe]"),e(i),n.subscribe("change",e))}},o=(e,t="session")=>{const r="session"===t?null===globalThis||void 0===globalThis?void 0:globalThis.sessionStorage:null===globalThis||void 0===globalThis?void 0:globalThis.localStorage;return{remove:()=>null==r?void 0:r.removeItem(e),set:t=>{try{null==r||r.setItem(e,JSON.stringify(t))}catch(e){console.error(e)}},get:()=>{try{return JSON.parse(null==r?void 0:r.getItem(e))}catch(e){}}}};exports.createDerivedStore=(o,n,i=null)=>{const c=t=>e(null==i?void 0:i.persist)&&i.persist(t),l=s(null==i?void 0:i.initialValue),u=[];if(o.forEach((e=>{if(!r(e))throw new TypeError("Expecting array of StoreLike objects");e.subscribe((e=>u.push(e)))()})),!e(n))throw new TypeError("Expecting second argument to be the derivative function");if(!n.length||n.length>2)throw new TypeError("Expecting the derivative function to have exactly 1 or 2 arguments");let a=0,b=[];const g=e=>{t(e,"[derived.subscribe]"),a++||o.forEach(((e,t)=>{b.push(e.subscribe((e=>{u[t]=e,1===n.length?(l.set(n(u)),c(l.get())):n(u,(e=>{l.set(e),c(l.get())}))})))}));const r=l.subscribe(e);return()=>{--a||(b.forEach((e=>e())),b=[]),r()}};return{get:()=>{let e;return g((t=>e=t))(),e},subscribe:g}},exports.createStoragePersistor=o,exports.createStorageStore=(e,t="session",r)=>{["local","session"].includes(t)||(console.warn(`Ignoring invalid storageType '${t}', using 'session' instead.`),t="session");const n=o(e,t);return s(n.get()||r,{persist:n.set})},exports.createStore=s,exports.isStoreLike=r;
